{
	"info": {
		"_postman_id": "e897c2be-7798-485b-a1e7-4b86c63ba6dc",
		"name": "APICollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29587087",
		"_collection_link": "https://www.postman.com/galactic-robot-939378/workspace/tonto/collection/29587087-e897c2be-7798-485b-a1e7-4b86c63ba6dc?action=share&source=collection_link&creator=29587087"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code should have an OK string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Body  response should have a paymentCurrency string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"paymentCurrency\");",
									"});",
									"",
									"pm.test(\"Header should contain x-operation-id\", function () {",
									"    pm.response.to.have.header(\"x-operation-id\");",
									"});",
									"",
									"pm.test(\"Header should contain Connection\", function () {",
									"    pm.response.to.have.header(\"Connection\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 0.5s\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Confirm that paymentCurrency is EUR\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
									"});",
									"",
									"pm.test(\"title is fusio\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Fusio\");",
									"});",
									"",
									"pm.test(\"apiVersion is '7.2.1.0'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.apiVersion).to.eql(\"7.2.1.0\");",
									"});",
									"",
									"pm.test(\"categories ia an array of strings\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.categories).to.eql([",
									"        \"authorization\",",
									"        \"system\",",
									"        \"consumer\",",
									"        \"backend\",",
									"        \"defau56lt\"]);",
									"});",
									"",
									"pm.test(\"scopes is a variable with a default string \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scopes).to.eql([\"default\"]);",
									"});",
									"pm.test(\"Confirm there are no cookies received from the server\", function () {",
									"    pm.response.to.have.body();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID - Valid ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://demo.fusio-project.org/index.php",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID - Invalid ID(params not using TODO ID)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code should have an OK string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response Body Contains 'The Russian' \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Russian\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"confirm the total number of All book is 6\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"pm.test(\"Response time is less than 1000s\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Content-Length is present\", function () {",
									"    pm.response.to.have.header(\"Content-Length\");",
									"});",
									"",
									"pm.test(\"Response Body Contains 'The Vanishing Half' \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Vanishing Half\");",
									"});",
									"",
									"pm.test(\"Response Body Contains 'The Midnight Library' \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Midnight Library\");",
									"});",
									"",
									"",
									"pm.test(\"Response Body Contains 'Vicount Who Loved Me' \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Viscount Who Loved Me\");",
									"});",
									"",
									"pm.test(\"Response Body Contains 'Untamed' \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Untamed\");",
									"});",
									"",
									"",
									"pm.test(\" confirm that header contains Date is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"});",
									"",
									"pm.test(\"Confirm there are no cookies received from the server\", function () {",
									"    pm.response.to.have.body();",
									"});",
									"var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    console.log(jsonData.length);",
									"   ",
									"var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    console.log(jsonData.length);",
									"   ",
									"",
									"pm.environment.set(\"bookid\", jsonData[[0]].id);",
									"",
									"pm.environment.set(\"booktype\", jsonData[[0]].type);",
									"",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_env_url}}/books",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000s\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Successful Get request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Status code should have an OK string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Confirm ID is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Confirm the price is 12.98\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.price).to.eql(12.98);",
									"});",
									"",
									"pm.test(\"Confirm the  isbn number is correct or equal to '1780899475' \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isbn).to.eql(\"1780899475\");",
									"});",
									"",
									"pm.test(\"Confirm the  availabilty of the book ordered \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.available).to.eql(true);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"etag is present\", function () {",
									"    pm.response.to.have.header(\"etag\");",
									"});",
									"",
									"pm.test(\"Confirm the name to be 'The Russian' \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"The Russian\");",
									"});",
									"",
									"pm.test(\"Confirm there are no cookies received from the server\", function () {",
									"    pm.response.to.have.body();",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_env_url}}/books/:bookid",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"books",
								":bookid"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "bookid",
									"value": "{{bookid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books by Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code should have an OK string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Successful get request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Status code should have an OK string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Confirm the total number of books with the type 'fiction' is four\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"Confirm there are no cookies received from the server\", function () {",
									"    pm.response.to.have.body();",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    console.log(jsonData.length);",
									"   ",
									"",
									"pm.environment.set(\"booktype\", jsonData[[0]].type);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_env_url}}/books?type={{booktype}}",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "{{booktype}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "7ba7c85608b15f61217ee9aea12899a36ac59b1bdf8c7805a05b8b9ed5b53d70",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order - using book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Confirm that order was created with the key value true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.created).to.eql(true);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"orderID\", jsonData.orderId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "7ba7c85608b15f61217ee9aea12899a36ac59b1bdf8c7805a05b8b9ed5b53d70",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": {{bookid}},\n    \"customerName\": \"micheal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_env_url}}/orders",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "7ba7c85608b15f61217ee9aea12899a36ac59b1bdf8c7805a05b8b9ed5b53d70",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_env_url}}/orders",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using orderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "7ba7c85608b15f61217ee9aea12899a36ac59b1bdf8c7805a05b8b9ed5b53d70",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_env_url}}/orders/:orderId",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update an order",
			"item": [
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "7ba7c85608b15f61217ee9aea12899a36ac59b1bdf8c7805a05b8b9ed5b53d70",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": {{bookid}},\n    \"customerName\": \"Micbeal babalola\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_env_url}}/orders/",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"orders",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "7ba7c85608b15f61217ee9aea12899a36ac59b1bdf8c7805a05b8b9ed5b53d70",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_env_url}}/orders/:orderId",
							"host": [
								"{{base_env_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register API Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessTokenUrl",
							"value": "https://demo.fusio-project.org/",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Authority",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"clientName\": \"Ibironke\",\n   \"clientEmail\": \"ibironkeyekii@gmail.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_env_url}}/api-clients/",
					"host": [
						"{{base_env_url}}"
					],
					"path": [
						"api-clients",
						""
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get API Status",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_env_url}}/status",
					"host": [
						"{{base_env_url}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	]
}